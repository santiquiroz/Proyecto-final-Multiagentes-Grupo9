// file: InteraccionUsuarioOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontologias;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: InteraccionUsuarioOntology.java
 */
public class InteraccionUsuarioOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "InteraccionUsuario";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new InteraccionUsuarioOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String PREDICADOIDENTIDADUSUARIO_INSTANCIAIDENTIDADUSUARIO="InstanciaIdentidadUsuario";
    public static final String PREDICADOIDENTIDADUSUARIO="PredicadoIdentidadUsuario";
    public static final String VERIFICACION_CONTENIDOVERIFICACION="ContenidoVerificacion";
    public static final String VERIFICACION="Verificacion";
    public static final String ABRIRPUERTAS="AbrirPuertas";
    public static final String ENCENDERLAMPARA="EncenderLampara";
    public static final String ACTIVARVENTILACION="ActivarVentilacion";
    public static final String NOTIFICACION="Notificacion";
    public static final String INFONOTIFICACION_CONTENIDO="Contenido";
    public static final String INFONOTIFICACION_IDENTIFICACIONUSUARIO="IdentificacionUsuario";
    public static final String INFONOTIFICACION="InfoNotificacion";
    public static final String IDENTIDADUSUARIO_TIPOUSUARIO="TipoUsuario";
    public static final String IDENTIDADUSUARIO="IdentidadUsuario";

  /**
   * Constructor
  */
  private InteraccionUsuarioOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema identidadUsuarioSchema = new ConceptSchema(IDENTIDADUSUARIO);
    add(identidadUsuarioSchema, ontologias.IdentidadUsuario.class);
    ConceptSchema infoNotificacionSchema = new ConceptSchema(INFONOTIFICACION);
    add(infoNotificacionSchema, ontologias.InfoNotificacion.class);

    // adding AgentAction(s)
    AgentActionSchema notificacionSchema = new AgentActionSchema(NOTIFICACION);
    add(notificacionSchema, ontologias.Notificacion.class);
    AgentActionSchema activarVentilacionSchema = new AgentActionSchema(ACTIVARVENTILACION);
    add(activarVentilacionSchema, ontologias.ActivarVentilacion.class);
    AgentActionSchema encenderLamparaSchema = new AgentActionSchema(ENCENDERLAMPARA);
    add(encenderLamparaSchema, ontologias.EncenderLampara.class);
    AgentActionSchema abrirPuertasSchema = new AgentActionSchema(ABRIRPUERTAS);
    add(abrirPuertasSchema, ontologias.AbrirPuertas.class);
    AgentActionSchema verificacionSchema = new AgentActionSchema(VERIFICACION);
    add(verificacionSchema, ontologias.Verificacion.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema predicadoIdentidadUsuarioSchema = new PredicateSchema(PREDICADOIDENTIDADUSUARIO);
    add(predicadoIdentidadUsuarioSchema, ontologias.PredicadoIdentidadUsuario.class);


    // adding fields
    identidadUsuarioSchema.add(IDENTIDADUSUARIO_TIPOUSUARIO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    infoNotificacionSchema.add(INFONOTIFICACION_IDENTIFICACIONUSUARIO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    infoNotificacionSchema.add(INFONOTIFICACION_CONTENIDO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    verificacionSchema.add(VERIFICACION_CONTENIDOVERIFICACION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    predicadoIdentidadUsuarioSchema.add(PREDICADOIDENTIDADUSUARIO_INSTANCIAIDENTIDADUSUARIO, identidadUsuarioSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
